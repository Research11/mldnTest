此方法仅供参考

//================将数据分页==============
//查询后的数据集合,该对象同样用户截取后的数据集合
List obj = new ArrayList();
//数据总数
int totalCount = 155;
//总的页数
int pageCount = 0;
//每页显示的总数
int endNum = 20;
//当前页码
int startNum = 1;
/*计算出总共能分成多少页*/
if (totalCount % endNum > 0)      //数据总数和每页显示的总数不能整除的情况
{
pageCount = totalCount / endNum + 1;
}
else   //数据总数和每页显示的总数能整除的情况
{
pageCount = totalCount / endNum;
}
if(totalCount > 0)
{
if(startNum <= pageCount)
{
if(startNum == 1)     //当前页数为第一页
{
if(totalCount <= endNum)  //数据总数小于每页显示的数据条数
{
//截止到总的数据条数(当前数据不足一页，按一页显示)，这样才不会出现数组越界异常
obj = obj.subList(0, totalCount);
}
else
{
obj = obj.subList(0, endNum);
}
}
else
{
//截取起始下标
int fromIndex = (startNum - 1) * endNum;
//截取截止下标
int toIndex = startNum * endNum;
/*计算截取截止下标*/
if ((totalCount - toIndex) % endNum >= 0)
{
toIndex = startNum * endNum;
}
else
{
toIndex = (startNum - 1) * endNum + (totalCount % endNum);
}
if (totalCount >= toIndex)
{
obj = obj.subList(fromIndex, toIndex);
}
} 
}
else
{
obj = null;
}

//信用风险管理系统成功案例

//续保保单号查询专用
    @Transactional
    public Page<Policy> getRenewalPolicyNo(Policy data, Page<Policy> page,Integer start,Integer limit) throws ParseException {    	
    	
    	Page<Policy> policys = new Page<Policy>();
    	List<Policy>list=policyDao.getAllRenewalPolicyNo(data, page);
    	policys.setTotalCount(list.size());
    	
    	int pageCount = 0;
    	
    	int startNum = start/limit+1;
    	
    	if (list.size() % limit > 0){
    		pageCount = list.size() / limit + 1;
    	}else{
    		pageCount = list.size() / limit;
    	}
    	if(list.size() > 0){
    		if(startNum <= pageCount){
    			if(startNum == 1){
    				if(list.size() <= limit){
    				list = list.subList(0, list.size());//截止到总的数据条数(当前数据不足一页，按一页显示)，这样才不会出现数组越界异常
    				policys.setResult(list);
    			}else{
    		list = list.subList(0, limit);
    		policys.setResult(list);
    	}
    	}else{//当前页不等于一
    	//截取起始下标
    	int fromIndex = (startNum - 1) * limit;
    	//截取截止下标
    	int toIndex = startNum * limit;
    	/*计算截取截止下标*/
    	if ((list.size() - toIndex) % limit >= 0){
    		toIndex = startNum * limit;
    	}
    	else
    	{
    	toIndex = (startNum - 1) * limit + (list.size()-limit);
    	}
    	if (list.size() >= toIndex)
    	{
    	 list = list.subList(fromIndex, toIndex);
    	 policys.setResult(list);
    	}
    	} 
    	}
    	else
    	{
    		list = null;
    	}
    	
    	}   	
        return policys;
    }


