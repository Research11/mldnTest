1.抽象类和接口是一个层次的概念：

抽象类是从多个类中抽象出来的公共模板，提供子类均具有的功能

接口是从多个类中抽象出来的规范，体现的是规范和实现分离的原则，同时也解决了java单继承的缺陷。

2.普通方法与抽象方法的对比
普通方法必须要有实现体，抽象方法不能有实现体，抽象方法要用abstract修饰符修饰
//普通方法
public void show(){
  System.out.println("hello word!");  	
}
//抽象方法
public abstract void show();

3.普通类 与 抽象类的对比

抽象类不能被实例化 抽象类可以具有抽象方法和普通方法 普通类中只能定义普通方法

4.抽象类与接口的对比 （二者都不能被实例化）

接口:是一个不能被实例化，且只能拥有抽象方法的类型

public abstract class person{
	抽象方法
	普通方法
}
public interface person{
	抽象方法
	抽象方法
}

抽象类的使用是通过继承 继承抽象类的子类必须实现所有的抽象方法

接口的使用是通过implements来实现的 实现了接口的类必须实现接口中的所有抽象方法

5.规则：
抽象类与接口不能被实例化

抽象类与接口分别被继承与实现的场合，其子类必须实现其中的抽象方法

抽象类中的抽象方法的访问修饰符不能为private,接口中的抽象方法的访问修饰符必须为public

面向对象的设计原则：

摘取出代码中变化的行为，形成接口

多用组合少用继承

针对接口编程，不依赖具体实现

针对扩展开放，针对改变关闭

总结：抽象类便于复用，接口便于代码维护























 